global:
  domain: ""
  clusterName: ""
  defaultApplicationName: "otel"
  defaultSubsystemName: "integration"
  logLevel: "info"
  collectionInterval: "30s"
  version: "0.0.231"
  deploymentEnvironmentName: ""

  extensions:
    kubernetesDashboard:
      enabled: true

# Set distribution for:
# - openshift
# - eks/fargate
# - gke/autopilot

distribution: ""
opentelemetry-agent:
  enabled: true
  mode: daemonset
  fullnameOverride: coralogix-opentelemetry
  # extraVolumes: []
  # extraVolumeMounts: []
  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
  # Extra config for the collector
  # This is used to add extra receivers, processors, exporters, and connectors
  # to the "logs", "metrics", and "traces" pipelines and other pipelines managed by the chart.
  # Processors are added at the end of the pipeline before batching.
  # You cannot use this to add new pipelines, instead use the
  # config.service.pipelines field to add new pipelines.
  extraConfig: {}
  # extraConfig:
  #   receivers:
  #     otlp/3:
  #       protocols:
  #         grpc:
  #           endpoint: ${env:MY_POD_IP}:4317
  #         http:
  #           endpoint: ${env:MY_POD_IP}:4318
  #   processors:
  #     batch: {}
  #   exporters:
  #     debug/2: {}
  #   connectors:
  #     spanmetrics/2:
  #       metrics:
  #         enabled: true
  #   service:
  #     pipelines:
  #       logs:
  #         receivers:
  #         - otlp/3
  #         processors:
  #         - batch/2
  #         exporters:
  #         - debug/2
  #       metrics:
  #         receivers:
  #         - otlp/3
  #         - spanmetrics/2
  targetAllocator:
    enabled: false
    replicas: 1
    allocationStrategy: "per-node"
    prometheusCR:
      enabled: true
      # The interval at which the target allocator will scrape the Prometheus server
      scrapeInterval: 30s
    image:
      repository: ghcr.io/open-telemetry/opentelemetry-operator/target-allocator
      tag: v0.132.0

  # serviceAccount:
  #   # Specifies whether a service account should be created
  #   create: true
  #   # Annotations to add to the service account
  #   annotations: {}
  #   # The name of the service account to use.
  #   # If not set and create is true, a name is generated using the fullname template
  #   name: ""
  clusterRole:
    name: "coralogix-opentelemetry-agent"
    clusterRoleBinding:
      name: "coralogix-opentelemetry-agent"
  # priorityClass:
  #   # Specifies whether a priorityClass should be created.
  #   create: false
  #   # The name of the clusterRole to use.
  #   # If not set a name is generated using the fullname template.
  #   name: ""
  #   # Sets the priority value of the priority class.
  #   priorityValue: 1000000000
  hostNetwork: true
  dnsPolicy: "ClusterFirstWithHostNet"

  presets:
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    k8sResourceAttributes:
      enabled: true
      agentType: "agent"
    fleetManagement:
      enabled: true
      agentType: "agent"
      clusterName: "{{.Values.global.clusterName}}"

    logsCollection:
      enabled: true
      includeCollectorLogs: true
      storeCheckpoints: true
      maxRecombineLogSize: 1048576
      # The maximum number of consecutive entries that will be combined into a single entry before the match occurs
      maxUnmatchedBatchSize: 1
      # The maximum number of consecutive entries that will be combined into a single entry.
      maxBatchSize: 1000
      extraFilelogOperators: []
      # - type: recombine
      #   combine_field: body
      #   source_identifier: attributes["log.file.path"]
      #   is_first_entry: body matches "^(YOUR-LOGS-REGEX)"

      # Configure specific multline options for namespaces
      # / pods / container names.
      multilineConfigs: []
      # multilineConfigs:
      #   - namespaceName:
      #       value: kube-system
      #     podName:
      #       value: app-.*
      #       useRegex: true
      #     containerName:
      #       value: http
      #     firstEntryRegex: ^[^\s].*
      #     combineWith: ""
    kubernetesAttributes:
      enabled: true
      podUid:
        enabled: false
      podStartTime:
        enabled: false
      nodeFilter:
        enabled: true

    hostMetrics:
      enabled: true
      # Enables process metrics scraping.
      # Disabled by default, requires privilleged mode
      process:
        enabled: false
      collectionInterval: "{{.Values.global.collectionInterval}}"
    kubeletMetrics:
      enabled: true
      collectionInterval: "{{.Values.global.collectionInterval}}"
    spanMetrics:
      enabled: true
      collectionInterval: "{{.Values.global.collectionInterval}}"
      metricsExpiration: 5m
      # histogramBuckets:
      #   [1ms, 4ms, 10ms, 20ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]

    #   transformStatements:
    #     - set(attributes["db.namespace"], attributes["db.name"]) where attributes["db.namespace"] == nil
    #     - set(attributes["db.namespace"], attributes["server.address"]) where attributes["db.namespace"] == nil
    #     - set(attributes["db.namespace"], attributes["network.peer.name"]) where attributes["db.namespace"] == nil
    #     - set(attributes["db.namespace"], attributes["net.peer.name"]) where attributes["db.namespace"] == nil
    #     - set(attributes["db.namespace"], attributes["db.system"]) where attributes["db.namespace"] == nil
    #     - set(attributes["db.operation.name"], attributes["db.operation"]) where attributes["db.operation.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.sql.table"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.cassandra.table"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.mongodb.collection"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.redis.database_index"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.elasticsearch.path_parts.index"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["db.cosmosdb.container"]) where attributes["db.collection.name"] == nil
    #     - set(attributes["db.collection.name"], attributes["aws_dynamodb.table_names"]) where attributes["db.collection.name"] == nil
    #   transformStatements:
    #     - replace_pattern(attributes["db.query.text"], "\\d+", "?") # removes potential IDs for the attribute
    #     - set(attributes["span.duration_ns"], span.end_time_unix_nano - span.start_time_unix_nano) # stores the span duration in ns in an attribute
    # Configures collector to add service.version to spanMetrics dimensions
    #   serviceVersion:
    #     enabled: true
    #   errorTracking:
    #     enabled: true
    #   dbMetrics:
    #     enabled: true
    #     serviceVersion:
    #       enabled: true

    # Configures the collector to export span metrics with different histogram bucket options
    # for different applications. Applications are selected and routed to different pipelines
    # using OTTL. For more information see https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/connector/routingconnector
    # Make sure to not use with spanMetrics preset, which applies single spanmetrics connector to tracing pipeline.
    spanMetricsMulti:
      enabled: false
      collectionInterval: "{{.Values.global.collectionInterval}}"
      metricsExpiration: 5m
      # defaultHistogramBuckets:
      #   [1ms, 4ms, 10ms, 20ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]
      configs: []
      #  - selector: route() where attributes["service.name"] == "one"
      #    histogramBuckets: [1s, 2s]
      #  - selector: route() where attributes["service.name"] == "two"
      #    histogramBuckets: [5s, 10s]
    # Removes uids and other uneeded attributes from metric resources.
    # This reduces target_info cardinality.
    # reduceResourceAttributes:
    #   enabled: false
     # Configures Host Metrics receiver to collect Entity Events.
    hostEntityEvents:
      enabled: true

    # Head sampling configuration for traces.
    # When enabled, this creates a separate pipeline for sampled traces using probabilistic sampler.
    # More info: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/probabilisticsamplerprocessor/README.md
    # headSampling:
    #   enabled: false
    #   # Percentage of traces to sample (0-100)
    #   percentage: 10
    #   # Sampling mode - "proportional", "equalizing", "hash_seed"
    #   mode: "proportional"

    # Configures the collector to collect its own metrics using Prometheus receiver.
    # Adds the prometheus receiver to the metrics pipeline with a scrape config
    # targeting the collector's metrics endpoint.
    # Also adds a transform processor to clean up metric names and attributes.
    collectorMetrics:
      enabled: true
      # Scrape interval for collector metrics
      scrapeInterval: "{{.Values.global.collectionInterval}}"
    # Configures the collector to receive Jaeger data in all supported protocols.
    # Adds the jaeger receiver to the traces pipeline with all protocols configured.
    jaegerReceiver:
      enabled: true
    # Configures the collector to receive Zipkin data.
    # Adds the zipkin receiver to the traces pipeline.
    zipkinReceiver:
      enabled: true
    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true
    # Configures the collector to receive StatsD metrics.
    # Adds the statsd receiver to the metrics pipeline.
    statsdReceiver:
      enabled: true

    # Configures the collector to expose zPages for debugging.
    # Reference: https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
    zpages:
      enabled: true

    # Configures the collector to expose pprof for profiling.
    pprof:
      enabled: true

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      # sendBatchSize: 1024
      # sendBatchMaxSize: 2048
      # timeout: "1s"

    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}
    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true

    # Applies semantic convention transformations.
    semconv:
      enabled: true
  config:
    # extensions:
    #   zpages:
    #     endpoint: localhost:55679
    # receivers:
    #   statsd:
    #     endpoint: ${env:MY_POD_IP}:8125
    # processors: {}
    # exporters: {}
    service:
      telemetry:
        resource:
          service.name: "opentelemetry-collector"
          cx.agent.type: "agent"
        logs:
          level: "{{ .Values.global.logLevel }}"
      extensions:
        - health_check
      pipelines:
        metrics:
          exporters: []
          processors:
            - memory_limiter
          # receivers: []
        traces:
          exporters: []
          processors:
            - memory_limiter
          # receivers: []
        logs:
          exporters: []
          processors:
            - memory_limiter
          # receivers: []
  tolerations:
    - operator: Exists

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 2G

  # ports:
  #   In order to enable podMonitor, following part must be enabled in order to expose the required port:
  #   metrics:
  #     enabled: true

  # podMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true

opentelemetry-cluster-collector:
  enabled: true
  mode: deployment
  fullnameOverride: coralogix-opentelemetry-collector
  clusterRole:
    name: "coralogix-opentelemetry-collector"
    create: true
    clusterRoleBinding:
      name: "coralogix-opentelemetry-collector"
  # priorityClass:
  #   # Specifies whether a priorityClass should be created.
  #   create: false
  #   # The name of the clusterRole to use.
  #   # If not set a name is generated using the fullname template.
  #   name: ""
  #   # Sets the priority value of the priority class.
  #   priorityValue: 1000000000
  replicaCount: 1
  presets:
    fleetManagement:
      enabled: true
      agentType: "cluster-collector"
      clusterName: "{{.Values.global.clusterName}}"
    clusterMetrics:
      enabled: true
      collectionInterval: "{{.Values.global.collectionInterval}}"
      customMetrics:
        enabled: true
    kubernetesEvents:
      enabled: true
    kubernetesExtraMetrics:
      enabled: true
      scrapeAll: false
    otlpReceiver:
      enabled: true
    kubernetesAttributes:
      enabled: true
      podUid:
        enabled: false
      podStartTime:
        enabled: false
    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true
      k8sNodeName:
        enabled: false
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    # Removes uids and other uneeded attributes from metric resources.
    # This reduces target_info cardinality.
    reduceResourceAttributes:
      enabled: false
    # Enables Kubernetes Resource collection for for resource catalog
    kubernetesResources:
      enabled: true
      # OTTL filter statements for filtering out resources by name regex
      filterStatements:
        # Filter out pods given a regex. This example is for telemetrygen pods.
        # - 'body["object"]["kind"] == "Pod" and IsMatch(body["object"]["metadata"]["name"], "telemetrygen.*")'
        # - 'body["kind"] == "Pod" and IsMatch(body["metadata"]["name"], "telemetrygen.*")'
    # Configures the collector to collect its own metrics using Prometheus receiver.
    # Adds the prometheus receiver to the metrics pipeline with a scrape config
    # targeting the collector's metrics endpoint.
    # Also adds a transform processor to clean up metric names and attributes.
    collectorMetrics:
      enabled: true
      # Scrape interval for collector metrics
      scrapeInterval: "{{.Values.global.collectionInterval}}"

    # Configures the collector to expose zPages for debugging.
    # Reference: https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
    zpages:
      enabled: true

    # Configures the collector to expose pprof for profiling.
    pprof:
      enabled: true

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      # sendBatchSize: 1024
      # sendBatchMaxSize: 2048
      # timeout: "1s"

    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
  # Extra config for the collector
  # This is used to add extra receivers, processors, exporters, and connectors
  # to the "logs", "metrics", and "traces" pipelines and other pipelines managed by the chart.
  # Processors are added at the end of the pipeline before batching.
  # You cannot use this to add new pipelines, instead use the
  # config.service.pipelines field to add new pipelines.
  extraConfig: {}
  # extraConfig:
  #   receivers:
  #     otlp/3:
  #       protocols:
  #         grpc:
  #           endpoint: ${env:MY_POD_IP}:4317
  #         http:
  #           endpoint: ${env:MY_POD_IP}:4318
  #   processors:
  #     batch: {}
  #   exporters:
  #     debug/2: {}
  #   connectors:
  #     spanmetrics/2:
  #       metrics:
  #         enabled: true
  #   service:
  #     pipelines:
  #       logs:
  #         receivers:
  #         - otlp/3
  #         processors:
  #         - batch/2
  #         exporters:
  #         - debug/2
  #       metrics:
  #         receivers:
  #         - otlp/3
  #         - spanmetrics/2
  config:
    # extensions: {}
    # receivers: {}
    # processors: {}
    # exporters: {}
    service:
      telemetry:
        resource:
          service.name: "opentelemetry-collector"
          cx.agent.type: "cluster-collector"
        logs:
          level: "{{ .Values.global.logLevel }}"
      extensions:
        - health_check
      pipelines:
        logs:
          exporters: []
          processors:
            - memory_limiter
          # receivers: []
        metrics:
          exporters: []
          processors:
            - memory_limiter
          # receivers: []
  tolerations:
    - operator: Exists

  startupProbe:
    failureThreshold: 4
    initialDelaySeconds: 30
    periodSeconds: 15
    httpGet:
      port: 13133

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 2G

  ports:
    otlp-http:
      enabled: false
    # In order to enable serviceMonitor, following part must be enabled in order to expose the required port:
    # metrics:
    #   enabled: true

  # serviceMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true

opentelemetry-agent-windows:
  enabled: false
opentelemetry-gateway:
  enabled: false
  mode: deployment
  fullnameOverride: coralogix-opentelemetry-gateway
  service:
    enabled: true
    clusterIP: "None"

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY

  # Extra config for the collector
  # This is used to add extra receivers, processors, exporters, and connectors
  # to the "logs", "metrics", and "traces" pipelines and other pipelines managed by the chart.
  # Processors are added at the end of the pipeline before batching.
  # You cannot use this to add new pipelines, instead use the
  # config.service.pipelines field to add new pipelines.
  extraConfig: {}
  # extraConfig:
  #   receivers:
  #     otlp/3:
  #       protocols:
  #         grpc:
  #           endpoint: ${env:MY_POD_IP}:4317
  #         http:
  #           endpoint: ${env:MY_POD_IP}:4318
  #   processors:
  #     batch: {}
  #   exporters:
  #     debug/2: {}
  #   connectors:
  #     spanmetrics/2:
  #       metrics:
  #         enabled: true
  #   service:
  #     pipelines:
  #       logs:
  #         receivers:
  #         - otlp/3
  #         processors:
  #         - batch/2
  #         exporters:
  #         - debug/2
  #       metrics:
  #         receivers:
  #         - otlp/3
  #         - spanmetrics/2

  presets:
    fleetManagement:
      enabled: true
      agentType: "gateway"
      clusterName: "{{.Values.global.clusterName}}"
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    # Configures the collector to collect its own metrics using Prometheus receiver.
    # Adds the prometheus receiver to the metrics pipeline with a scrape config
    # targeting the collector's metrics endpoint.
    # Also adds a transform processor to clean up metric names and attributes.
    collectorMetrics:
      enabled: true
      # Scrape interval for collector metrics
      scrapeInterval: "{{.Values.global.collectionInterval}}"
    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true
      pipeline: "metrics"

    # Configures the collector to expose zPages for debugging.
    # Reference: https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
    zpages:
      enabled: true

    # Configures the collector to expose pprof for profiling.
    pprof:
      enabled: true

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      # sendBatchSize: 1024
      # sendBatchMaxSize: 2048
      # timeout: "1s"

    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}

    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true
    k8sResourceAttributes:
      enabled: true
      agentType: "gateway"

  config:
    # extensions: {}
    # exporters: {}
    # processors: {}
    # receivers: {}
    service:
      telemetry:
        logs:
          level: "{{ .Values.global.logLevel }}"
      pipelines:
        metrics:
          exporters: []
          processors:
            - memory_limiter
        traces:
          exporters: []
          processors:
            - memory_limiter
            - tail_sampling
          # receivers: []

  tolerations:
    - operator: Exists
  ports:
    otlp-http:
      enabled: false

opentelemetry-receiver:
  enabled: false
  mode: deployment
  fullnameOverride: coralogix-opentelemetry-receiver
  service:
    enabled: true

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
  presets:
    fleetManagement:
      enabled: true
      agentType: "receiver"
      clusterName: "{{.Values.global.clusterName}}"
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    # Configures the collector to collect its own metrics using Prometheus receiver.
    # Adds the prometheus receiver to the metrics pipeline with a scrape config
    # targeting the collector's metrics endpoint.
    # Also adds a transform processor to clean up metric names and attributes.
    collectorMetrics:
      enabled: true
      # Scrape interval for collector metrics
      scrapeInterval: "{{.Values.global.collectionInterval}}"
      pipeline: "none"
    k8sResourceAttributes:
      enabled: true
      agentType: "receiver"
    resourceDetection:
      enabled: true
      pipeline: "none"

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      # sendBatchSize: 1024
      # sendBatchMaxSize: 2048
      # timeout: "1s"

    # Configures the collector to expose zPages for debugging.
    # Reference: https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
    zpages:
      enabled: true

    # Configures the collector to expose pprof for profiling.
    pprof:
      enabled: true
    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true

    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}
      pipelines: ["none"]
  config:
    # exporters: {}
    # processors: {}
    # receivers: {}
    service:
      telemetry:
        resource:
          service.name: "opentelemetry-collector"
          cx.agent.type: "receiver"
        logs:
          level: "{{ .Values.global.logLevel }}"
      pipelines:
        metrics/self_monitoring:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - resourcedetection/env
            - resourcedetection/region
            - batch
          receivers:
            - prometheus
        metrics:
          exporters:
            - coralogix
          processors:
            - memory_limiter
          # receivers: []
        traces:
          exporters:
            - loadbalancing
          processors:
            - memory_limiter
          # receivers: []
        logs:
          exporters:
            - coralogix
          processors:
            - memory_limiter
          # receivers: []

  tolerations:
    - operator: Exists
  ports:
    otlp-http:
      enabled: false

coralogix-ebpf-profiler:
  enabled: false
  profiling:
    profiling_otel_agent:
      samples_per_second: 20
      reporter_interval: 5s
      debug: false
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 128Mi
  k8s_watcher:
    replicaCount: 1
    debug: false
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 128Mi

opentelemetry-ebpf-instrumentation:
  enabled: false
  k8sCache:
    replicas: 2
#  priorityClass:
#    create: false
#    name: ""
#    value: 1000000000
#  tolerations: []

coralogix-operator:
  enabled: false
#  secret:
#    create: true
#    secretKeyReference: {}
#    data:
#      apiKey: ""
#  deployment:
#    replicas: 1
#  coralogixOperator:
#    region: ""
#    domain: ""
#    labelSelector: {}
#    namespaceSelector: {}

# OpenTelemetry Agent for EKS Fargate
# Collects logs and metrics from Fargate pods
opentelemetry-agent-eks-fargate:
  enabled: false
  fullnameOverride: "otel-agent-eks-fargate"
  mode: statefulset
  replicaCount: 1
  networkMode: "ipv4"
  distribution: "eks/fargate"

  presets:
    # Configures metadata collection for EKS Fargate
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"

    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      timeout: "60s"

    # Configures EKS Fargate specific collection
    eksFargate:
      monitoringCollector: false
      kubeletStats:
        collectionInterval: "{{.Values.global.collectionInterval}}"
      initContainer:
        enabled: true
        image:
          repository: "public.ecr.aws/aws-cli/aws-cli"
          tag: "2.28.17"

    # Configures Kubernetes attributes processor
    kubernetesAttributes:
      enabled: true

    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true
      maxRecvMsgSizeMiB: 20

    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true
      dbusMachineId:
        enabled: false

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  ports:
    metrics:
      enabled: true

  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 1
      memory: 2Gi

  podSecurityContext:
    fsGroup: 65534

# OpenTelemetry Agent for EKS Fargate Monitoring
# Separate collector deployment for monitoring metrics collection
opentelemetry-agent-eks-fargate-monitoring:
  enabled: false
  fullnameOverride: "otel-agent-eks-fargate-monitoring"
  mode: deployment
  replicaCount: 1
  distribution: "eks/fargate"

  config:
    exporters: {}
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
      memory_ballast: {}
    receivers: {}
    processors:
      memory_limiter: null
    service:
      telemetry:
        logs:
          encoding: json
      extensions:
        - health_check

  presets:
    # Configures metadata collection for EKS Fargate monitoring
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"

    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}

    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      timeout: "60s"

    # Configures EKS Fargate monitoring collector
    eksFargate:
      monitoringCollector: true
      kubeletStats:
        collectionInterval: "{{.Values.global.collectionInterval}}"

    # Configures Kubernetes attributes processor
    kubernetesAttributes:
      enabled: false

    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true
      maxRecvMsgSizeMiB: 20

    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true
      dbusMachineId:
        enabled: false

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 1
      memory: 2Gi

  podSecurityContext:
    fsGroup: 65534

  ports:
    metrics:
      enabled: true
