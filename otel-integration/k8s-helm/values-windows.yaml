global:
  domain: ""
  clusterName: ""
  defaultApplicationName: "otel"
  defaultSubsystemName: "integration"
  logLevel: "warn"
  collectionInterval: "30s"

  extensions:
    kubernetesDashboard:
      enabled: true


opentelemetry-agent-windows:
  enabled: true
  isWindows: true
  mode: daemonset
  fullnameOverride: coralogix-opentelemetry-windows
  nodeSelector:
    kubernetes.io/os: windows
  image:
    # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.126.0-windows-2019-amd64"
    # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).
    digest: ""

  extraVolumes:
    - name: etcmachineid
      hostPath:
        path: /etc/machine-id
    - name: varlibdbusmachineid
      hostPath:
        path: /var/lib/dbus/machine-id

  extraVolumeMounts:
    - mountPath: /etc/machine-id
      mountPropagation: HostToContainer
      name: etcmachineid
      readOnly: true
    - mountPath: /var/lib/dbus/machine-id
      mountPropagation: HostToContainer
      name: varlibdbusmachineid
      readOnly: true
  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.node.name=$(K8S_NODE_NAME)"
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  clusterRole:
    name: "coralogix-opentelemetry-agent-windows"
    clusterRoleBinding:
      name: "coralogix-opentelemetry-agent-windows"
  priorityClass:
    # Specifies whether a priorityClass should be created.
    create: false
    # The name of the clusterRole to use.
    # If not set a name is generated using the fullname template.
    name: ""
    # Sets the priority value of the priority class.
    priorityValue: 1000000000
  hostNetwork: true
  dnsPolicy: "ClusterFirstWithHostNet"

  presets:
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    fleetManagement:
      enabled: true
      agentType: "agent"
      clusterName: "{{.Values.global.clusterName}}"
    logsCollection:
      enabled: true
      storeCheckpoints: true
      maxRecombineLogSize: 1048576
      # The maximum number of consecutive entries that will be combined into a single entry before the match occurs
      maxUnmatchedBatchSize: 1
      extraFilelogOperators: []
      # - type: recombine
      #   combine_field: body
      #   source_identifier: attributes["log.file.path"]
      #   is_first_entry: body matches "^(YOUR-LOGS-REGEX)"

      # Configure specific multline options for namespaces
      # / pods / container names.
      multilineConfigs: []
      # multilineConfigs:
      #   - namespaceName:
      #       value: kube-system
      #     podName:
      #       value: app-.*
      #       useRegex: true
      #     containerName:
      #       value: http
      #     firstEntryRegex: ^[^\s].*
      #     combineWith: ""
    kubernetesAttributes:
      enabled: true
      podUid:
        enabled: false
      podStartTime:
        enabled: false
      nodeFilter:
        enabled: true
    
    hostMetrics:
      enabled: true
      # Enables process metrics scraping.
      # Disabled by default, requires privileged mode
      process:
        enabled: false
      collectionInterval: "{{.Values.global.collectionInterval}}"
    kubeletMetrics:
      enabled: true
      collectionInterval: "{{.Values.global.collectionInterval}}"
    spanMetrics:
      enabled: false
      collectionInterval: "{{.Values.global.collectionInterval}}"
      metricsExpiration: 5m
      histogramBuckets: [1ms, 4ms, 10ms, 20ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]
      extraDimensions:
        - name: http.method
        - name: cgx.transaction
        - name: cgx.transaction.root
    
    # Configures the collector to export span metrics with different histogram bucket options
    # for different applications. Applications are selected and routed to different pipelines
    # using OTTL. For more information see https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/connector/routingconnector
    # Make sure to not use with spanMetrics preset, which applies single spanmetrics connector to tracing pipeline.
    spanMetricsMulti:
      enabled: false
      collectionInterval: "{{.Values.global.collectionInterval}}"
      metricsExpiration: 5m
      extraDimensions:
        - name: http.method
        - name: cgx.transaction
        - name: cgx.transaction.root
        - name: status_code
      defaultHistogramBuckets:
        [1ms, 4ms, 10ms, 20ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]
      configs: []
      #  - selector: route() where attributes["service.name"] == "one"
      #    histogramBuckets: [1s, 2s]
      #  - selector: route() where attributes["service.name"] == "two"
      #    histogramBuckets: [5s, 10s]
    # Removes uids and other uneeded attributes from metric resources.
    # This reduces target_info cardinality.
    reduceResourceAttributes:
      enabled: false
    # Configures the collector to collect its own metrics using Prometheus receiver.
    # Adds the prometheus receiver to the metrics pipeline with a scrape config
    # targeting the collector's metrics endpoint.
    # Also adds a transform processor to clean up metric names and attributes.
    collectorMetrics:
      enabled: true
      # Scrape interval for collector metrics
      scrapeInterval: "{{.Values.global.collectionInterval}}"
    
    # Configures the collector to export data to Coralogix.
    coralogixExporter:
      enabled: true
      privateKey: ${env:CORALOGIX_PRIVATE_KEY}
    # Configures the collector to expose zPages for debugging.
    # Reference: https://github.com/open-telemetry/opentelemetry-collector/tree/main/extension/zpagesextension
    zpages:
      enabled: true

    # Configures the collector to expose pprof for profiling.
    pprof:
      enabled: true
        # Configures the collector to receive Jaeger data in all supported protocols.
    # Adds the jaeger receiver to the traces pipeline with all protocols configured.
    jaegerReceiver:
      enabled: true
    # Configures the collector to receive Zipkin data.
    # Adds the zipkin receiver to the traces pipeline.
    zipkinReceiver:
      enabled: true
    # Configures the collector to receive OTLP data.
    # Adds the OTLP receiver to the traces, metrics, and logs pipelines.
    otlpReceiver:
      enabled: true
    # Configures the collector to receive StatsD metrics.
    # Adds the statsd receiver to the metrics pipeline.
    statsdReceiver:
      enabled: true
    # Configuration for the batch processor.
    # Adds the batch processor to the logs, metrics, and traces pipelines.
    # See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/batchprocessor for details on the processor.
    batch:
      enabled: true
      # sendBatchSize: 1024
      # sendBatchMaxSize: 2048
      # timeout: "1s"
    # Configures resource detection processors to add system and environment information.
    # Also configures volumes and volume mounts for the collector.
    resourceDetection:
      enabled: true
  config:
    # extensions: {}
    # receivers:{}
    processors: {}

    # exporters: {}

    service:
      telemetry:
        resource:
          service.name: "opentelemetry-collector"
          cx.agent.type: "agent"
        logs:
          level: "{{ .Values.global.logLevel }}"
      extensions:
      - health_check
      pipelines:
        metrics:
          # exporters: []
          processors:
            - memory_limiter
          # receivers: []
        traces:
          # exporters: []
          processors:
            - memory_limiter
          # receivers: []
        logs:
          # exporters: []
          processors:
            - memory_limiter
          # receivers: []
  tolerations:
    - operator: Exists

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 2G
  
  # In order to enable podMonitor, following part must be enabled in order to expose the required port:
  # ports:
  #   metrics:
  #    enabled: true

  # podMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true

# Limit other sub-charts to Linux nodes only
opentelemetry-agent:
  nodeSelector:
    kubernetes.io/os: linux

opentelemetry-cluster-collector:
  nodeSelector:
    kubernetes.io/os: linux
