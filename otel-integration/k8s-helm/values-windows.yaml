opentelemetry-agent-windows:
  enabled: true
  isWindows: true
  mode: daemonset
  fullnameOverride: coralogix-opentelemetry-windows
  nodeSelector:
    kubernetes.io/os: windows
  image:
    # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
    repository: coralogixrepo/opentelemetry-collector-contrib-windows
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.85.0"
    # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).
    digest: ""
  extraVolumes:
    - name: etcmachineid
      hostPath:
        path: /etc/machine-id
    - name: varlibdbusmachineid
      hostPath:
        path: /var/lib/dbus/machine-id

  extraVolumeMounts:
    - mountPath: /etc/machine-id
      mountPropagation: HostToContainer
      name: etcmachineid
      readOnly: true
    - mountPath: /var/lib/dbus/machine-id
      mountPropagation: HostToContainer
      name: varlibdbusmachineid
      readOnly: true
  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-keys
          key: PRIVATE_KEY
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.node.name=$(K8S_NODE_NAME)"
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  clusterRole:
    name: "coralogix-opentelemetry-agent-windows"
    clusterRoleBinding:
      name: "coralogix-opentelemetry-agent-windows"
  hostNetwork: true
  dnsPolicy: "ClusterFirstWithHostNet"

  presets:
    metadata:
      enabled: true
      clusterName: "{{.Values.global.clusterName}}"
      integrationName: "coralogix-integration-helm"
    logsCollection:
      enabled: true
      storeCheckpoints: true
      maxRecombineLogSize: 1048576
      extraFilelogOperators: []
#     - type: recombine
#       combine_field: body
#       source_identifier: attributes["log.file.path"]
#       is_first_entry: body matches "^(YOUR-LOGS-REGEX)"
    kubernetesAttributes:
      enabled: true
    hostMetrics:
      enabled: true
    kubeletMetrics:
      enabled: true

  config:
    extensions:
      zpages:
        endpoint: localhost:55679
      pprof:
        endpoint: localhost:1777

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:4317
          http:
            endpoint: ${MY_POD_IP}:4318
      zipkin:
        endpoint: ${MY_POD_IP}:9411
      jaeger:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:14250
          thrift_http:
            endpoint: ${MY_POD_IP}:14268
          thrift_compact:
            endpoint: ${MY_POD_IP}:6831
          thrift_binary:
            endpoint: ${MY_POD_IP}:6832
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
              - targets:
                  - ${MY_POD_IP}:8888
    processors:
      resourcedetection/env:
        detectors: ["system", "env"]
        timeout: 2s
        override: false
        system:
          resource_attributes:
            host.id:
              enabled: true
      resourcedetection/region:
        detectors: ["gcp", "ec2"]
        timeout: 2s
        override: true
      k8sattributes:
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - "k8s.namespace.name"
            - "k8s.deployment.name"
            - "k8s.statefulset.name"
            - "k8s.daemonset.name"
            - "k8s.cronjob.name"
            - "k8s.job.name"
            - "k8s.pod.name"
            - "k8s.node.name"
      spanmetrics:
        metrics_exporter: coralogix
        dimensions:
          - name: "k8s.deployment.name"
          - name: "k8s.statefulset.name"
          - name: "k8s.daemonset.name"
          - name: "k8s.cronjob.name"
          - name: "k8s.job.name"
          - name: "k8s.container.name"
          - name: "k8s.node.name"
          - name: "k8s.namespace.name"
      # Will get the k8s resource limits
      memory_limiter: null

    exporters:
      coralogix:
        timeout: "30s"
        private_key: "${CORALOGIX_PRIVATE_KEY}"
        domain: "{{ .Values.global.domain }}"
        application_name: "{{ .Values.global.defaultApplicationName }}"
        subsystem_name: "{{ .Values.global.defaultSubsystemName }}"
        application_name_attributes:
          - "k8s.namespace.name"
          - "service.namespace"
        subsystem_name_attributes:
          - "k8s.deployment.name"
          - "k8s.statefulset.name"
          - "k8s.daemonset.name"
          - "k8s.cronjob.name"
          - "service.name"

    service:
      telemetry:
        logs:
          level: "{{ .Values.global.logLevel }}"
          encoding: json
        metrics:
          address: ${MY_POD_IP}:8888
      extensions:
      - zpages
      - pprof
      - health_check
      pipelines:
        metrics:
          exporters:
            - coralogix
          processors:
            - k8sattributes
            - resourcedetection/env
            - resourcedetection/region
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
            - hostmetrics
        traces:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - spanmetrics
            - batch
          receivers:
            - otlp
            - zipkin
            - jaeger
        logs:
          exporters:
            - coralogix
          processors:
            - batch
          receivers:
            - otlp
  tolerations:
    - operator: Exists

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 2G

  ports:
    jaeger-binary:
      enabled: true
      containerPort: 6832
      servicePort: 6832
      hostPort: 6832
      protocol: TCP
    # In order to enable podMonitor, following part must be enabled in order to expose the required port:
    # metrics:
    #   enabled: true

  # podMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true

# Limit other sub-charts to Linux nodes only
opentelemetry-agent:
  nodeSelector:
    kubernetes.io/os: linux

opentelemetry-cluster-collector:
  nodeSelector:
    kubernetes.io/os: linux

kube-state-metrics:
  nodeSelector:
    kubernetes.io/os: linux
