global:
  traces:
    endpoint: "<traces-endpoint-here>"
  metrics:
    endpoint: "<metrics-endpoint-here>"
  logs:
    endpoint: "<logs-endpoint-here>"
  defaultApplicationName: "default"
  defaultSubsystemName: "nodes"


opentelemetry-collector:
  mode: daemonset
  hostNetwork: true
  fullnameOverride: otel-coralogix
  clusterRole:
    name: "otel-coralogix"
    clusterRoleBinding:
      name: "otel-coralogix"
  presets:
    logsCollection:
      enabled: true
    kubernetesAttributes:
      enabled: true
    hostMetrics:
      enabled: true
    kubeletMetrics:
      enabled: true


  extraEnvs:
  - name: CORALOGIX_PRIVATE_KEY
    valueFrom:
      secretKeyRef:
        name: coralogix-keys
        key: PRIVATE_KEY
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.node.name=$(K8S_NODE_NAME)"
  config:
    exporters:
      coralogix:
        private_key: "${CORALOGIX_PRIVATE_KEY}"
        traces:
          endpoint: "{{ .Values.global.traces.endpoint }}"
        metrics:
          endpoint: "{{ .Values.global.metrics.endpoint }}"
        logs:
          endpoint: "{{ .Values.global.logs.endpoint }}"
        application_name_attributes:
        - "k8s.namespace.name" 
        - "service.namespace"
        subsystem_name_attributes:
        - "k8s.deployment.name"
        - "k8s.statefulset.name"
        - "k8s.daemonset.name"
        - "k8s.cronjob.name"
        - "k8s.job.name"
        - "k8s.container.name"
        - "k8s.node.name"
        - "service.name"
        application_name: "{{.Values.global.defaultApplicationName }}"
        subsystem_name: "{{.Values.global.defaultSubsystemName }}"
    processors:
      memory_limiter: null # Will get the k8s resource limits
      resourcedetection/env:
        detectors: ["system","env"]
        timeout: 2s
        override: false
      spanmetrics:
        metrics_exporter: coralogix
        dimensions:
          - name: "k8s.deployment.name"
          - name: "k8s.statefulset.name"
          - name: "k8s.daemonset.name"
          - name: "k8s.cronjob.name"
          - name: "k8s.job.name"
          - name: "k8s.container.name"
          - name: "k8s.node.name"
          - name: "k8s.namespace.name" 
    receivers:
      zipkin:
      jaeger:
      otlp:
        protocols:
          grpc:
          http:
    service:
      pipelines:
        traces:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - spanmetrics
            - batch
          receivers:
            - otlp
            - zipkin
            - jaeger
        metrics:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - resourcedetection/env
            - batch
          receivers:
            - otlp
        logs:
          exporters:
            - coralogix
          processors:
            - batch
          receivers:
            - otlp
  tolerations: 
    - operator: Exists

  resources:
    limits:
      cpu: 1
      memory: 2G

  # In order to enable podMonitor, following part must be enabled in order to expose the required port:
  # ports:
  #   metrics:
  #     enabled: true

  # podMonitor:
  #   enabled: true

  # prometheusRule:
  #   enabled: true
  #   defaultRules:
  #     enabled: true
