receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  prometheus:
    config:
      scrape_configs:
        - job_name: opentelemetry-collector
          scrape_interval: 10s
          static_configs:
            - targets:
                - 0.0.0.0:8888
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      memory:
      disk:
      network:
      process:
processors:
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
  batch:
    timeout: 1s
    send_batch_size: 1024
  resourcedetection/ecs:
    detectors: [ecs, ec2, system]
    timeout: 5s
    override: false
    ecs:
      resource_attributes:
        aws.ecs.cluster.arn:
          enabled: true
        aws.ecs.task.arn:
          enabled: true
        aws.ecs.task.family:
          enabled: true
        aws.ecs.task.id:
          enabled: true
        aws.ecs.launchtype:
          enabled: true
        cloud.provider:
          enabled: true
        cloud.platform:
          enabled: true
        cloud.region:
          enabled: true
        cloud.availability_zone:
          enabled: true
    ec2:
      resource_attributes:
        host.id:
          enabled: true
        host.name:
          enabled: true
        host.type:
          enabled: true
    system:
      resource_attributes:
        host.name:
          enabled: true
        host.arch:
          enabled: true
        os.type:
          enabled: true
  resource:
    attributes:
      - key: service.name
        value: "${application_name}"
        action: upsert
      - key: service.version
        value: "1.0.0"
        action: upsert
      - key: cx.agent.type
        value: "ecs"
        action: upsert
      - key: cx.cluster.name
        value: "${ecs_cluster_name}"
        action: upsert
      - key: cx.otel.agent.attributes
        value: true
        action: upsert

exporters:
  coralogix:
    domain: "${coralogix_domain}"
    private_key: "$${env:PRIVATE_KEY}"
    application_name: "${application_name}"
    subsystem_name: "${subsystem_name}"
    timeout: 30s

extensions:
  opamp:
    server:
      http:
        endpoint: "https://ingress.${coralogix_domain}/opamp/v1"
        headers:
          Authorization: "Bearer $${env:PRIVATE_KEY}"
    agent_description:
      non_identifying_attributes:
        cx.agent.type: "ecs"
        cx.cluster.name: "${ecs_cluster_name}"
        cx.otel.agent.attributes: "true"
    capabilities:
      reports_effective_config: true
      reports_health: true
  health_check:
    endpoint: 0.0.0.0:13133

service:
  extensions: [opamp, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection/ecs, resource, batch]
      exporters: [coralogix]
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [memory_limiter, resourcedetection/ecs, resource, batch]
      exporters: [coralogix]
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection/ecs, resource, batch]
      exporters: [coralogix]
  telemetry:
    logs:
      level: info
      output_paths:
        - stdout
      encoding: json
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: 0.0.0.0
                port: 8888
    resource:
      service.name: otelcol-contrib
      service.version: "1.0.0"
      cx.agent.type: ecs
      cx.cluster.name: ${ecs_cluster_name}
      cx.otel.agent.attributes: "true"