<system>
  log_level "#{ENV['log_level']}"
</system>
<source>
  @type tail
  path /var/lib/docker/containers/*/*-json.log
  pos_file /var/lib/docker/docker.log.pos
  tag raw.containers.*
  read_from_head true
  <parse>
    @type json
  </parse>
</source>

<filter raw.containers.**>
  @type docker_metadata
</filter>

<filter raw.containers.**>
  @type record_transformer
  enable_ruby true
  <record>
    container_id ${record.dig("docker", "id")}
  </record>
</filter>

<match raw.containers.**>
  @type detect_exceptions
  remove_tag_prefix raw
  message log
  stream container_id
  multiline_flush_interval 5
  max_bytes 500000
  max_lines 1000
</match>

<filter containers.**>
  @type record_transformer
  remove_keys container_id
</filter>

<match containers.**>
    @type rewrite_tag_filter
    <rule>
      key $.docker.name
      pattern ^(.+)$
      tag $1.${tag}
    </rule>
</match>

<match {ecs-agent,fluentd-coralogix}.**>
  @type null
</match>

<filter **>
  @type record_transformer
  enable_ruby true
  auto_typecast true
  renew_record true
  <record>
    privateKey "#{ENV['PRIVATE_KEY']}"
    applicationName ${ENV["APP_NAME"] || record.dig("docker", "labels", "com.amazonaws.ecs.cluster")}
    subsystemName ${ENV["SUB_SYSTEM"] || record.dig("docker", "labels", "com.amazonaws.ecs.container-name") || record.dig("docker", "name")}
    text ${record.to_json}
  </record>
</filter>

 <match **>
   @type http
   endpoint "https://#{ENV['ENDPOINT']}/logs/rest/singles"
   headers_from_placeholders {"private_key":"${$.privateKey}"}
  error_response_as_unrecoverable false
  retryable_response_codes 503
  <buffer $.privateKey>
    @type memory
    compress gzip
    flush_thread_count 4
    chunk_limit_size 6MB
    flush_interval 1s
    overflow_action throw_exception
    retry_max_times 10
    retry_type periodic
    retry_wait 8
  </buffer>
</match>