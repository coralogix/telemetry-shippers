AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Systems Manager Parameter Store parameter

Parameters:
  StorageType:
    Type: String
    Default: ParameterStoreAdvanced
    Description: 'The storage used for the OTEL config.yaml. Can be one of: ParameterStore, ParameterStoreAdvanced'
    AllowedValues:
      - ParameterStore
      - ParameterStoreAdvanced
  ParameterName:
    Type: String
    Default: ''
    Description: 'The name of the Parameter Store you intend to create and use.'
    AllowedPattern: '^([\/]?[a-zA-Z0-9_.-]+)?(\/[a-zA-Z0-9_.-]+){0,14}$'
    MaxLength: 300

Conditions:
  UseParameterStoreAdvanced: !Equals [!Ref StorageType, "ParameterStoreAdvanced"]

Resources:
  OTELConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref ParameterName
      Description: Configuration parameter for Coralogix OTEL Collector
      Type: String
      Value: |
        connectors:
          forward/sampled: {}
          forward/db: {}
          spanmetrics:
            namespace: ""
            histogram:
              explicit:
                buckets: [100us, 1ms, 2ms, 4ms, 6ms, 10ms, 100ms, 250ms]
            dimensions:
              - name: http.method
              - name: cgx.transaction
              - name: cgx.transaction.root
              - name: aws.ecs.task.family
              - name: aws.ecs.task.id
              - name: service.namespace
              - name: container_name
            exemplars:
              enabled: true
            aggregation_cardinality_limit: 1000
            aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
            metrics_flush_interval: 15s
            events:
              enabled: true
              dimensions:
                - name: exception.type
                - name: exception.message
          spanmetrics/db:
            aggregation_cardinality_limit: 100000
            dimensions:
            - name: db.namespace
            - name: db.operation.name
            - name: db.collection.name
            - name: db.system
            - name: service.version
            histogram:
              explicit:
                buckets:
                - 100us
                - 1ms
                - 2ms
                - 2.5ms
                - 4ms
                - 6ms
                - 10ms
                - 100ms
                - 250ms
            metrics_expiration: 5m
            metrics_flush_interval: '30s'
            namespace: db

        receivers:
          fluentforward/socket: { endpoint: unix:///var/run/fluent.sock }
          awsecscontainermetrics: { collection_interval: 10s }
          otlp:
            protocols:
              grpc: { endpoint: 0.0.0.0:4317 }
              http: { endpoint: 0.0.0.0:4318 }
          hostmetrics:
            root_path: /
            collection_interval: 10s
            scrapers:
              cpu: { metrics: { system.cpu.utilization: { enabled: true } } }
              disk: null
              filesystem:
                exclude_fs_types: { fs_types: [autofs, binfmt_misc, bpf, cgroup2, configfs, debugfs, devpts, devtmpfs, fusectl, hugetlbfs, iso9660, mqueue, nsfs, overlay, proc, procfs, pstore, rpc_pipefs, securityfs, selinuxfs, squashfs, sysfs, tracefs], match_type: strict }
                exclude_mount_points: { match_type: regexp, mount_points: [/dev/*, /proc/*, /sys/*, /run/k3s/containerd/*, /run/containerd/runc/*, /var/lib/docker/*, /var/lib/kubelet/*, /snap/*] }
              load: null
              memory: { metrics: { system.memory.utilization: { enabled: true } } }
              network: null
              process:
                metrics:
                  process.cpu.utilization: { enabled: true }
                  process.memory.utilization: { enabled: true }
                  process.threads: { enabled: true }
                mute_process_exe_error: true
                mute_process_user_error: true
          prometheus:
            config:
              scrape_configs:
              - job_name: opentelemetry-collector
                scrape_interval: 30s
                static_configs:
                - targets:
                  - 127.0.0.1:8888
        processors:
          transform/firelens:
            log_statements:
              - context: log
                statements:
                  - merge_maps(cache, ParseJSON(body), "insert") where IsMatch(body, "^\\{")
                  - set(body, cache["message"]) where cache["message"] != nil
                  - set(trace_id.string, cache["trace_id"]) where cache["trace_id"] != nil
                  - set(span_id.string, cache["span_id"]) where cache["span_id"] != nil
                  - set(severity_number, SEVERITY_NUMBER_INFO) where IsMatch(cache["level"], "(?i)info")
                  - set(severity_number, SEVERITY_NUMBER_WARN) where IsMatch(cache["level"], "(?i)warn")
                  - set(severity_number, SEVERITY_NUMBER_ERROR) where IsMatch(cache["level"], "(?i)err")
                  - set(severity_number, SEVERITY_NUMBER_DEBUG) where IsMatch(cache["level"], "(?i)debug")
                  - set(severity_number, SEVERITY_NUMBER_TRACE) where IsMatch(cache["level"], "(?i)trace")
                  - set(severity_number, cache["severity_number"]) where cache["severity_number"] != nil
                  - set(resource.attributes["container_name"], attributes["container_name"])
                  - set(resource.attributes["container_id"], attributes["container_id"])
                  - delete_key(attributes, "container_id")
                  - delete_key(attributes, "container_name")
                  - delete_matching_keys(cache, "^(message|trace_id|span_id|severity_number)$")
                  - merge_maps(attributes, cache, "insert")
          batch: { send_batch_max_size: 2048, send_batch_size: 1024, timeout: 1s }
          probabilistic_sampler:
            sampling_percentage: 10
            mode: proportional
          resource/metadata:
            attributes:
              - action: upsert
                key: cx.otel_integration.name
                value: coralogix-integration-ecs-fargate
          resourcedetection:
            detectors: [system, env, ec2, ecs]
            override: false
            timeout: 2s
            system:
              resource_attributes:
                host.id: { enabled: false }
                host.cpu.cache.l2.size: { enabled: true }
                host.cpu.stepping: { enabled: true }
                host.cpu.model.name: { enabled: true }
                host.cpu.model.id: { enabled: true }
                host.cpu.family: { enabled: true }
                host.cpu.vendor.id: { enabled: true }
                host.mac: { enabled: true }
                host.ip: { enabled: true }
                os.description: { enabled: true }
          transform/entity-event:
            error_mode: ignore
            log_statements:
              - context: log
                statements:
                  - set(attributes["otel.entity.id"]["host.id"], resource.attributes["aws.ecs.task.id"])
                  - merge_maps(attributes, resource.attributes, "insert")
              - context: resource
                statements:
                  - keep_keys(attributes, [""])
          filter/db_spanmetrics:
            traces:
              span:
              - attributes["db.system"] == nil

        exporters:
          debug: { verbosity: detailed }
          coralogix:
            application_name: 'otel'
            application_name_attributes: [aws.ecs.task.family, service.namespace]
            domain: ${CORALOGIX_DOMAIN}
            logs: { headers: { X-Coralogix-Distribution: ecs-fargate-integration/0.0.2 } }
            metrics: { headers: { X-Coralogix-Distribution: ecs-fargate-integration/0.0.2 } }
            traces: { headers: { X-Coralogix-Distribution: ecs-fargate-integration/0.0.2 } }
            private_key: ${PRIVATE_KEY}
            subsystem_name: 'integration'
            subsystem_name_attributes: [service.name, aws.ecs.docker.name, container_name]
            timeout: 30s
          coralogix/resource_catalog:
            application_name: resource
            domain: ${CORALOGIX_DOMAIN}
            private_key: ${PRIVATE_KEY}
            logs:
              headers:
                X-Coralogix-Distribution: ecs-fargate-integration/0.0.2
                x-coralogix-ingress: metadata-as-otlp-logs/v1
            subsystem_name: catalog
            timeout: 30s
        service:
          pipelines:
            logs/resource_catalog:
              exporters: [coralogix/resource_catalog]
              processors: [resourcedetection, transform/entity-event]
              receivers: [hostmetrics]
            logs:
              exporters: [coralogix]
              processors: [transform/firelens, resource/metadata, resourcedetection, batch]
              receivers: [fluentforward/socket]
            metrics:
              exporters: [coralogix]
              processors: [resource/metadata, resourcedetection, batch]
              receivers: [otlp, awsecscontainermetrics, prometheus, hostmetrics, spanmetrics, spanmetrics/db]
            traces:
              exporters: [forward/sampled, spanmetrics, forward/db]
              processors: [resource/metadata, resourcedetection, batch]
              receivers: [otlp]
            traces/sampled:
              exporters: [coralogix]
              processors: [probabilistic_sampler, batch]
              receivers: [forward/sampled]
            traces/db:
              exporters: [spanmetrics/db]
              processors: [filter/db_spanmetrics, batch]
              receivers: [forward/db]
          telemetry:
            logs: { level: "warn", encoding: json }
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888
            resource:
              service.instance.id: ""
              service.name: ""
        
      Tier: !If
        - UseParameterStoreAdvanced   # If it's "ParameterStoreAdvanced", set Tier to Advanced
        - Advanced
        - Standard                    # Else, set Tier to Standard
